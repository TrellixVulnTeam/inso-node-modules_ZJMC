export interface Request {
    _id: string;
    url?: string;
    method?: string;
    body?: {
        text?: string;
    };
    headers?: {
        name: string;
        value: string;
        description?: string;
        disabled?: boolean;
    }[];
}
export interface Response {
    status: number;
    statusText: string;
    data: {
        [key: string]: unknown;
    };
    headers: {
        [key: string]: string;
    };
}
export declare type SendRequestCallback = (requestId: string) => Promise<Response>;
export interface InsomniaOptions {
    requests?: Request[];
    sendRequest?: SendRequestCallback;
    bail?: boolean;
    keepFile?: boolean;
    testFilter?: string;
}
/**
 * An instance of Insomnia will be exposed as a global variable during
 * tests, and will provide a bunch of utility functions for sending
 * requests, etc.
 */
export default class Insomnia {
    requests: Request[];
    activeRequestId: string | null;
    activeEnvironmentId: string | null;
    sendRequest: SendRequestCallback | null;
    constructor(options?: InsomniaOptions);
    setActiveRequestId(id: string): void;
    clearActiveRequest(): void;
    /**
     *
     * @param reqId - request ID to send. Specifying nothing will send the active request
     * @returns {Promise<{headers: *, data: *, statusText: (string|string), status: *}>}
     */
    send(reqId?: string | null): Promise<Response>;
}
//# sourceMappingURL=insomnia.d.ts.map