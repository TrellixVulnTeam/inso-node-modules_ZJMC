import type { Request } from '../models/request';
import type { BaseModel } from '../models/index';
import type { CookieJar } from '../models/cookie-jar';
import type { Environment } from '../models/environment';
import type { GrpcRequest, GrpcRequestBody } from '../models/grpc-request';
export declare const KEEP_ON_ERROR = "keep";
export declare const THROW_ON_ERROR = "throw";
export declare type RenderPurpose = 'send' | 'general' | 'no-render';
export declare const RENDER_PURPOSE_SEND: RenderPurpose;
export declare const RENDER_PURPOSE_GENERAL: RenderPurpose;
export declare const RENDER_PURPOSE_NO_RENDER: RenderPurpose;
/** Key/value pairs to be provided to the render context */
export declare type ExtraRenderInfo = {
    name: string;
    value: any;
}[];
export declare type RenderedRequest = Request & {
    cookies: {
        name: string;
        value: string;
        disabled?: boolean;
    }[];
    cookieJar: CookieJar;
};
export declare type RenderedGrpcRequest = GrpcRequest;
export declare type RenderedGrpcRequestBody = GrpcRequestBody;
export interface RenderContextAndKeys {
    context: Record<string, any>;
    keys: {
        name: string;
        value: any;
    }[];
}
export declare type HandleGetRenderContext = () => Promise<RenderContextAndKeys>;
export declare type HandleRender = <T>(object: T, contextCacheKey?: string | null) => Promise<T>;
export declare function buildRenderContext(ancestors: BaseModel[] | null, rootEnvironment: Environment | null, subEnvironment: Environment | null, baseContext?: Record<string, any>): Promise<Record<string, any>>;
/**
 * Recursively render any JS object and return a new one
 * @param {*} obj - object to render
 * @param {object} context - context to render against
 * @param blacklistPathRegex - don't render these paths
 * @param errorMode - how to handle errors
 * @param name - name to include in error message
 * @return {Promise.<*>}
 */
export declare function render<T>(obj: T, context?: Record<string, any>, blacklistPathRegex?: RegExp | null, errorMode?: string, name?: string): Promise<T>;
export declare function getRenderContext(request: Request | GrpcRequest | null, environmentId: string | null, ancestors?: BaseModel[] | null, purpose?: RenderPurpose | null, extraInfo?: ExtraRenderInfo | null): Promise<Record<string, any>>;
export declare function getRenderedGrpcRequest(request: GrpcRequest, environmentId: string | null, purpose?: RenderPurpose, extraInfo?: ExtraRenderInfo, skipBody?: boolean): Promise<GrpcRequest>;
export declare function getRenderedGrpcRequestMessage(request: GrpcRequest, environmentId: string | null, purpose?: RenderPurpose, extraInfo?: ExtraRenderInfo): Promise<GrpcRequestBody>;
export declare function getRenderedRequestAndContext(request: Request, environmentId?: string | null, purpose?: RenderPurpose, extraInfo?: ExtraRenderInfo): Promise<{
    context: Record<string, any>;
    request: {
        cookieJar: CookieJar;
        cookies: never[];
        isPrivate: boolean;
        _id: string;
        authentication: import("../models/request").RequestAuthentication;
        body: import("../models/request").RequestBody;
        created: number;
        modified: number;
        description: string;
        headers: import("../models/request").RequestHeader[];
        metaSortKey: number;
        method: string;
        name: string;
        parameters: import("../models/request").RequestParameter[];
        parentId: string;
        settingDisableRenderRequestBody: boolean;
        settingEncodeUrl: boolean;
        settingSendCookies: boolean;
        settingStoreCookies: boolean;
        settingRebuildPath: boolean;
        settingFollowRedirects: string;
        type: string;
        url: string;
    };
}>;
//# sourceMappingURL=render.d.ts.map