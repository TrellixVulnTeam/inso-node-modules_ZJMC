import type { PluginArgumentEnumOption } from './extensions';
import type { PluginStore } from '../plugins/context';
export interface NunjucksParsedTagArg {
    type: 'string' | 'number' | 'boolean' | 'variable' | 'expression' | 'enum' | 'file' | 'model';
    encoding?: 'base64';
    value: string | number | boolean;
    defaultValue?: string | number | boolean;
    forceVariable?: boolean;
    placeholder?: string;
    help?: string;
    displayName?: string;
    quotedBy?: '"' | "'";
    validate?: (value: any) => string;
    hide?: (arg0: NunjucksParsedTagArg[]) => boolean;
    model?: string;
    options?: PluginArgumentEnumOption[];
    itemTypes?: ('file' | 'directory')[];
    extensions?: string[];
}
export interface NunjucksActionTag {
    name: string;
    icon?: string;
    run: (context: PluginStore) => Promise<void>;
}
export interface NunjucksParsedTag {
    name: string;
    args: NunjucksParsedTagArg[];
    actions?: NunjucksActionTag[];
    rawValue?: string;
    displayName?: string;
    description?: string;
    disablePreview?: (arg0: NunjucksParsedTagArg[]) => boolean;
}
interface Key {
    name: string;
    value: any;
}
/**
 * Get list of paths to all primitive types in nested object
 * @param {object} obj - object to analyse
 * @param {String} [prefix] - base path to prefix to all paths
 * @returns {Array} - list of paths
 */
export declare function getKeys(obj: any, prefix?: string): Key[];
export declare function forceBracketNotation(prefix: string, key: string | number): string;
export declare function normalizeToDotAndBracketNotation(prefix: string): any;
/**
 * Parse a Nunjucks tag string into a usable abject
 * @param {string} tagStr - the template string for the tag
 */
export declare function tokenizeTag(tagStr: string): NunjucksParsedTag;
/** Convert a tokenized tag back into a Nunjucks string */
export declare function unTokenizeTag(tagData: NunjucksParsedTag): string;
/** Get the default Nunjucks string for an extension */
export declare function getDefaultFill(name: string, args: NunjucksParsedTagArg[]): string;
export declare function encodeEncoding(value: string, encoding: 'base64'): string;
export declare function decodeEncoding(value: string): string;
export {};
//# sourceMappingURL=utils.d.ts.map