import type { BaseModel } from './index';
import { ValueOf } from 'type-fest';
export declare const name = "Workspace";
export declare const type = "Workspace";
export declare const prefix = "wrk";
export declare const canDuplicate = true;
export declare const canSync = true;
export declare const WorkspaceScopeKeys: {
    readonly design: "design";
    readonly collection: "collection";
};
export declare type WorkspaceScope = ValueOf<typeof WorkspaceScopeKeys>;
interface BaseWorkspace {
    name: string;
    description: string;
    scope: WorkspaceScope;
    certificates?: any;
}
export declare type Workspace = BaseModel & BaseWorkspace;
export declare function init(): {
    name: string;
    description: string;
    scope: "collection";
};
export declare function migrate(doc: Workspace): Promise<Workspace>;
export declare function getById(id?: string): Promise<Workspace | null>;
export declare function create(patch?: Partial<Workspace>): Promise<Workspace>;
export declare function all(): any;
export declare function count(): Promise<number>;
export declare function update(workspace: Workspace, patch: Partial<Workspace>): Promise<Workspace>;
export declare function remove(workspace: Workspace): Promise<void>;
export {};
//# sourceMappingURL=workspace.d.ts.map